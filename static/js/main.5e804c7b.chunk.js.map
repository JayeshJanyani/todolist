{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","library","add","faTrash","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","filteredItems","filter","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA+BeA,MA1Bf,SAAkBC,GACd,IACMC,EADMD,EAAME,MACIC,KAAI,SAAAC,GACtB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAC3BG,MAAOL,EAAKM,KAAMC,SACjB,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAG/C,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAC1CC,QAAS,kBAAKhB,EAAMiB,WAAWb,EAAKE,cAMhD,OACI,6BACKL,I,eCpBbiB,IAAQC,IAAIC,KAEL,IAgFQC,EAhFf,YACE,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAWRsB,YAAY,SAACV,GACX,EAAKW,SAAS,CACZC,YAAY,CACVd,KAAME,EAAEE,OAAOL,MACfH,IAAKmB,KAAKC,UAhBG,EAqBnBC,QAAQ,SAACf,GACPA,EAAEgB,iBACF,IAAMC,EAAQ,EAAKC,MAAMN,YAEzB,GADAO,QAAQC,IAAIH,GACM,KAAfA,EAAQnB,KAAU,CACnB,IAAMR,EAAM,GAAD,mBAAK,EAAK4B,MAAM5B,OAAhB,CAAsB2B,IACjC,EAAKN,SAAS,CACZrB,MAAOA,EACPsB,YAAY,CACVd,KAAK,GACLJ,IAAI,QA/BO,EAsCnBW,WAAW,SAACX,GACV,IAAM2B,EAAc,EAAKH,MAAM5B,MAAMgC,QAAO,SAAA9B,GAAI,OAC9CA,EAAKE,MAAMA,KAEX,EAAKiB,SAAS,CACZrB,MAAM+B,KA3CO,EAgDnBpB,UAAU,SAACH,EAAKJ,GACd,IAAMJ,EAAM,EAAK4B,MAAM5B,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGd,EAAKa,SAAS,CACZrB,MAAMA,KArDR,EAAK4B,MAAQ,CACV5B,MAAM,GACNsB,YAAY,CACVd,KAAK,GACLJ,IAAI,KAPQ,EADrB,sEA6DI,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa2B,SAAUC,KAAKT,SACnC,2BAAOpB,KAAK,OAAO8B,YAAY,aAC/B5B,MAAO2B,KAAKN,MAAMN,YAAYd,KAC9BC,SAAUyB,KAAKd,cAEf,4BAAQf,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUL,MAAOkC,KAAKN,MAAM5B,MAC5Be,WAAYmB,KAAKnB,WACjBJ,UAAYuB,KAAKvB,iBA1EzB,GAAyByB,aCILC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e804c7b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItem.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\n\r\n\r\nfunction ListItem(props) {\r\n    const items=props.items;\r\n    const listItems=items.map(item=>{\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" id={item.key}\r\n                 value={item.text} onChange={\r\n                  (e)=>{\r\n                      props.setUpdate(e.target.value, item.key)\r\n                  }   \r\n                 }/>\r\n            <span>\r\n                <FontAwesomeIcon className=\"faicons\" icon='trash'\r\n                onClick={()=> props.deleteItem(item.key)}/>\r\n            </span>\r\n            </p> \r\n            \r\n            </div>\r\n    })\r\n    return (\r\n        <div>\r\n            {listItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport ListItem  from './ListItem'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       items:[],\n       currentItem:{\n         text:'',\n         key:''\n       }\n    }\n  }\n  \n  handleInput=(e)=>{\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n  addItem=(e)=>{\n    e.preventDefault();\n    const newItem=this.state.currentItem;\n    console.log(newItem)\n    if(newItem.text!==\"\"){\n      const items=[...this.state.items,newItem]\n      this.setState({\n        items: items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n    }\n    \n  } \n\n  deleteItem=(key) => {\n    const filteredItems=this.state.items.filter(item=>\n      item.key!==key)\n\n      this.setState({\n        items:filteredItems\n      })\n\n  }\n\n  setUpdate=(text,key)=>{\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.key===key){\n        item.text=text;\n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <input type='text' placeholder='Enter TODO'\n            value={this.state.currentItem.text}\n            onChange={this.handleInput}\n            />\n            <button type='submit'>Add</button>\n          </form>\n        </header>\n        <ListItem items={this.state.items}\n        deleteItem={this.deleteItem}\n        setUpdate= {this.setUpdate}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}